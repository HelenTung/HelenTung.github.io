<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ココのブログ</title>
        <link>/</link>
        <description>ココの記録</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1635161916@qq.com (ココ也叫CoCo)</managingEditor>
            <webMaster>1635161916@qq.com (ココ也叫CoCo)</webMaster><lastBuildDate>Fri, 15 Jul 2022 15:58:26 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>go并发的三种模式</title>
    <link>/posts/coding/go%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 15 Jul 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/go%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[并发的三种模式 runner.go 主要为切片放置任务函数 package runner import ( &#34;errors&#34; &#34;os&#34; &#34;os/signal&#34; &#34;time&#34; ) type Runner struct { // interrupt 通道报告从操作系统发送的信号 interrupt chan os.Signal //complete通道报告处理任务已]]></description>
</item>
<item>
    <title>RSA加密算法</title>
    <link>/posts/thinking/rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link>
    <pubDate>Mon, 04 Jul 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[非对称加密-RSA算法 概念 加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。这种新的加密模式被]]></description>
</item>
<item>
    <title>C指针与多级指针</title>
    <link>/posts/coding/c_point/</link>
    <pubDate>Sat, 04 Jun 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/c_point/</guid>
    <description><![CDATA[指针与多级指针 什么是指针？指针是变量，确切的讲是储存地址的一种变量，全称应当是指针变量而非指针，以下是定义整形指针变量的代码。 #include&lt;stdio.h&gt; int main() { int *p =]]></description>
</item>
<item>
    <title>Wireshark的使用</title>
    <link>/posts/thinking/wireshark_use/</link>
    <pubDate>Mon, 04 Apr 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/wireshark_use/</guid>
    <description><![CDATA[Wireshark的使用与常见错误 wireshark的主要作用是为了诊断网络出现的问题，大致上比较重要的部分是过滤器与结果的表达，这两点是比]]></description>
</item>
<item>
    <title>虚拟内存篇</title>
    <link>/posts/thinking/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
    <pubDate>Thu, 01 Apr 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
    <description><![CDATA[储存管理篇～虚拟内存技术 虚拟内存 尽管基址寄存器和界限寄存器可以用于创建地址空间的抽象，还有另一个问题需要解决：管理软件的膨胀（bloatwa]]></description>
</item>
<item>
    <title>存储管理篇</title>
    <link>/posts/thinking/%E5%86%85%E5%AD%98%E7%AF%87/</link>
    <pubDate>Fri, 26 Mar 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E5%86%85%E5%AD%98%E7%AF%87/</guid>
    <description><![CDATA[存储管理 操作系统中管理分层存储器体系的部分称为存储管理器（memory manager）。它的任务是有效地管理内存，即记录哪些内存是正在使用的]]></description>
</item>
<item>
    <title>调度</title>
    <link>/posts/thinking/%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Thu, 25 Mar 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[调度 当计算机系统是多道程序设计系统时，通常就会有多个进程或线程同时竞争CPU。只要有两个或更多的进程处于就绪状态，这种情形就会发生。如果只有]]></description>
</item>
<item>
    <title>进程间通信</title>
    <link>/posts/thinking/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
    <pubDate>Mon, 22 Mar 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
    <description><![CDATA[进程间通信 简要地说，有三个问题。 第一个问题与上面的叙述有关，即一个进程如何把信息传递给另一个。 第二个要处理的问题是，确保两个或更多的进程在关]]></description>
</item>
<item>
    <title>进程与线程～线程篇</title>
    <link>/posts/thinking/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%AF%87/</link>
    <pubDate>Sun, 21 Mar 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%AF%87/</guid>
    <description><![CDATA[进程与线程～线程篇 线程的使用 必要性 并行实体共享同一个地址空间和所有可用数据的能力。对于某些应用而言，这种能力是必需的，而这正是多进程模型（它]]></description>
</item>
<item>
    <title>进程与线程～进程篇</title>
    <link>/posts/thinking/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E7%AF%87/</link>
    <pubDate>Sat, 20 Mar 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E7%AF%87/</guid>
    <description><![CDATA[进程与线程～进程篇 进程 进程模型 一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。从概念上说，每个进程拥有它自己的虚拟]]></description>
</item>
</channel>
</rss>
