<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ココのブログ</title>
        <link>/</link>
        <description>ココの記録</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1635161916@qq.com (ココ也叫CoCo)</managingEditor>
            <webMaster>1635161916@qq.com (ココ也叫CoCo)</webMaster><lastBuildDate>Fri, 04 Nov 2022 15:58:26 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>ffmpeg&#43;v4l2内核模块-虚拟摄像头</title>
    <link>/posts/thinking/%E8%99%9A%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4/</link>
    <pubDate>Fri, 04 Nov 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/%E8%99%9A%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4/</guid>
    <description><![CDATA[安装依赖以及内核模块 note 这需要安装ffmpeg以及v4l2loopback内核模块: 其中ffmpeg能够将我们想要的视频作为可以安装的网络摄像]]></description>
</item>
<item>
    <title>go并发的三种模式</title>
    <link>/posts/coding/go%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 15 Jul 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/go%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[并发的三种模式 runner.go 主要为切片放置任务函数 package runner import ( &#34;errors&#34; &#34;os&#34; &#34;os/signal&#34; &#34;time&#34; ) type Runner struct { // interrupt 通道报告从操作系统发送的信号 interrupt chan os.Signal //complete通道报告处理任务已]]></description>
</item>
<item>
    <title>RSA加密算法</title>
    <link>/posts/thinking/rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link>
    <pubDate>Mon, 04 Jul 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[非对称加密-RSA算法 概念 加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。这种新的加密模式被]]></description>
</item>
<item>
    <title>C指针与多级指针</title>
    <link>/posts/coding/c_point/</link>
    <pubDate>Sat, 04 Jun 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/c_point/</guid>
    <description><![CDATA[指针与多级指针 什么是指针？指针是变量，确切的讲是储存地址的一种变量，全称应当是指针变量而非指针，以下是定义整形指针变量的代码。 #include&lt;stdio.h&gt; int main() { int *p =]]></description>
</item>
<item>
    <title>Wireshark的使用</title>
    <link>/posts/thinking/wireshark_use/</link>
    <pubDate>Mon, 04 Apr 2022 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/thinking/wireshark_use/</guid>
    <description><![CDATA[Wireshark的使用与常见错误 wireshark的主要作用是为了诊断网络出现的问题，大致上比较重要的部分是过滤器与结果的表达，这两点是比]]></description>
</item>
<item>
    <title>gin入门</title>
    <link>/posts/coding/gin%E5%85%A5%E9%97%A8/</link>
    <pubDate>Sat, 04 Dec 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/gin%E5%85%A5%E9%97%A8/</guid>
    <description><![CDATA[gin入门与学习 静态文件请求 //// 静态文件请求 func main() { r := gin.Default() r.Static(&#34;/assets&#34;,&#34;./assets&#34;) r.StaticFS(&#34;/static&#34;,http.Dir(&#34;static&#34;)) r.StaticFile(&#34;/favicon.ico&#34;,&#34;./favicon.ico&#34;) r.Run() } 路由方法 func main() { r := gin.Default() //定义GET方法 r.GET(&#34;/get&#34;,func (c *gin.Context) { c.String(200,&#34;get&#34;) }) // 定义POST方法 r.POST(&#34;/post&#34;,func (c *gin.Context) {]]></description>
</item>
<item>
    <title>输入输出～fmt标准库</title>
    <link>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAfmt%E6%A0%87%E5%87%86/</link>
    <pubDate>Mon, 03 May 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAfmt%E6%A0%87%E5%87%86/</guid>
    <description><![CDATA[fmt 包实现了格式化I/O函数 //常见的格式控制符 type user struct { name string } func main() { u := user{&#34;tang&#34;} //占位符 fmt.Printf(&#34;% + v\\n&#34;, u) //格式化输出结构 fmt.Printf(&#34;%#v\\n&#34;, u) //输出值的 Go 语言表示方法 fmt.Printf(&#34;%T\\n&#34;,]]></description>
</item>
<item>
    <title>输入输出～ioutil标准库</title>
    <link>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAioutil%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <pubDate>Sun, 02 May 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAioutil%E6%A0%87%E5%87%86%E5%BA%93/</guid>
    <description><![CDATA[ioutil — 方便的IO操作函数集 NopCloser函数 tips 有时候我们需要传递一个 io.ReadCloser 的实例，而我们现在有一个 io.Reader 的实例，比如：strings.Reader]]></description>
</item>
<item>
    <title>io.Reader接口示例</title>
    <link>/posts/coding/go~io.reader/</link>
    <pubDate>Sat, 01 May 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/go~io.reader/</guid>
    <description><![CDATA[io.Reader 接口示例 // io.Reader 接口示例 package main import ( &#34;fmt&#34; &#34;io&#34; &#34;os&#34; &#34;strings&#34; &#34;util&#34; ) func ReaderExample() { FOREND: for { readerMenu() var ch string fmt.Scanln(&amp;ch) var ( data []byte err error ) switch strings.ToLower(ch) { case &#34;1&#34;: fmt.Println(&#34;请输入不多于9个字]]></description>
</item>
<item>
    <title>输入输出～go标准库</title>
    <link>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAgo%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <pubDate>Sat, 01 May 2021 15:58:26 &#43;0800</pubDate>
    <author>ココ</author>
    <guid>/posts/coding/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BAgo%E6%A0%87%E5%87%86%E5%BA%93/</guid>
    <description><![CDATA[输入输出 基本的 IO 接口 Reader 接口: type Reader interface{ Read(p []byte)(n int, err error) } Read 将 len(p) 个字节读取到 p 中。它返回读取的字节数 n（0 &lt;= n &lt;= len(p)） 以及任何遇到的错误。即使 Read]]></description>
</item>
</channel>
</rss>
